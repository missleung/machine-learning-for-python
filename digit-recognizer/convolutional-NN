#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 29 20:49:21 2019

@author: lisa
"""

# Set directory
import os
path='/Users/lisa/machine-learning-for-python/digit-recognizer'
os.chdir(path)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Read data
dat_raw = pd.read_csv('digit-recognizer/train.csv') 

dat_raw.shape #42000 numbers

dat_raw.columns #what is the column name of the actual value called..?

# Separate the actual numbers and pixels
dat_y=dat_raw.label
dat_X=dat_raw.drop('label', axis=1)

dat_y_coded = pd.get_dummies(dat_y)

# Splitting the data to train and test

from sklearn.model_selection import train_test_split

X_tr, X_te, y_tr, y_te = train_test_split(dat_X, dat_y_coded, test_size=0.33, random_state=42)

X_tr_reshaped = X_tr.values.reshape(X_tr.shape[0],28, 28, 1)
X_te_reshaped = X_te.values.reshape(X_te.shape[0],28, 28, 1)

# Checking out the first image
plt.figure()
plt.imshow(X_tr_reshaped[0])
plt.colorbar()
plt.grid(False)
plt.show()

# Need to scale it into 0 and 1. Since pixels are up to 255, we will divide everything by 255
X_tr_reshaped = X_tr_reshaped/255
X_te_reshaped = X_te_reshaped/255


# Checking out the first 5 images

for i in range(0,4):
    plt.figure()
    plt.imshow(X_tr_reshaped[i])
    plt.colorbar()
    plt.grid(False)
    plt.show() # this is pretty cool
    
y_tr[0:4,]

# Importing the Keras libraries and packages
from keras.models import Sequential # to initialize neural network. 

# Initialising the CNN
classifier = Sequential() # create object of a sequential 

# Adding a second convolutional layer
classifier.add(Conv2D(10, (3, 3), activation = 'relu', input_shape=(28, 28, 1))) 
# classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units = 128, activation = 'relu'))

classifier.add(Dense(units = 10, activation = 'softmax'))

# Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

# Putting the data into CNN
classifier.fit(X_tr_reshaped, y_tr, epochs=5)