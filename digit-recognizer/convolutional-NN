#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 29 20:49:21 2019

@author: lisa
"""

# Set directory
import os
path='/Users/lisa/machine-learning-for-python/digit-recognizer'
os.chdir(path)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Read data
dat_raw = pd.read_csv('digit-recognizer/train.csv') 

dat_raw.shape #42000 numbers

dat_raw.columns #what is the column name of the actual value called..?

# Separate the actual numbers and pixels
## Note: y is the outcome variable/data set and X are the exploratory variables/pixels

dat_y=dat_raw.label
dat_X=dat_raw.drop('label', axis=1)

dat_y_coded = pd.get_dummies(dat_y) 
# was trying the coded y variable but it gave me horrible estimates, need to try something else...

# Splitting the data to train and test

from sklearn.model_selection import train_test_split

X_tr, X_te, y_tr, y_te = train_test_split(dat_X, dat_y, test_size=0.33, random_state=42)

X_tr_reshaped = X_tr.values.reshape(X_tr.shape[0],28, 28, 1)
X_te_reshaped = X_te.values.reshape(X_te.shape[0],28, 28, 1)

# Checking out the first image
plt.figure()
plt.imshow(X_tr_reshaped[0])
plt.colorbar()
plt.grid(False)
plt.show()

# Need to scale it into 0 and 1. Since pixels are up to 255, we will divide everything by 255
X_tr_reshaped = X_tr_reshaped/255
X_te_reshaped = X_te_reshaped/255


# Checking out the first 5 images

for i in range(0,4):
    plt.figure()
    plt.imshow(X_tr_reshaped[i])
    plt.colorbar()
    plt.grid(False)
    plt.show() # this is pretty cool
    
y_tr[0:4,]

# Importing the Keras libraries and packages
from keras.models import Sequential # to initialize neural network. 

# Initialising the CNN
classifier = Sequential() # create object of a sequential 

# Adding a second convolutional layer
classifier.add(Conv2D(10, (3, 3), activation = 'relu', input_shape=(28, 28, 1))) 
# classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units = 128, activation = 'relu'))

classifier.add(Dense(units = 10, activation = 'softmax'))

# Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

# Putting the data into CNN
classifier.fit(X_tr_reshaped, y_tr, epochs=5)

test_loss, test_acc = classifier.evaluate(X_te_reshaped, y_te)

print('Test accuracy:', test_acc)

# # Predicting the Test set results
# y_pred = classifier.predict(X_te_reshaped)
# y_pred[y_pred>0.5] = 1
# y_errors = y_pred - y_te
#
# # Making the Confusion Matrix
# from sklearn.metrics import confusion_matrix
# cm = confusion_matrix(y_te, y_pred)

# Tuning the parameters...
# Reference from Udemy's course on Convolutional Neural Network

from keras.wrappers.scikit_learn import KerasClassifier #wrapper for scikit library
from sklearn.model_selection import GridSearchCV # or it could be sklearn.grid_search if it doesn;t work

def tuning_classifier(activ_1, activ_last, feat_num, loss_fun): #our own classifier function
    classifier = Sequential()
    classifier.add(Conv2D(feat_num, (3, 3), activation = 'relu', input_shape=(28, 28, 1))) 
    classifier.add(Flatten())
    classifier.add(Dense(units = 128, activation = activ_1))
    classifier.add(Dense(units = 10, activation = activ_last))
    classifier.compile(optimizer = 'adam', loss = loss_fun, metrics = ['accuracy'])
    return classifier #builds the classifier and spits out the classifier

classifier = KerasClassifier(build_fn = tuning_classifier) 

parameters = {'batch_size':[50],# # of samples on each pass; KerasClassifier object parameter
              'epochs': [10],# # of fitting on all samples; KerasClassifier object parameter
              'feat_num': [32,64],#build_classifier object parameter
              'activ_1':['relu'],#build_classifier object parameter
              'activ_last':['relu','sigmoid'],#build_classifier object parameter
              'loss_fun':['sparse_categorical_crossentropy','categorical_crossentropy']#build_classifier object parameter
              }

grid_search = GridSearchCV(estimator = classifier, 
                           param_grid = parameters, #KerasClassifier object param
                           scoring = 'accuracy',
                           cv = 5)

grid_search = grid_search.fit(X_tr_reshaped, y_tr)
best_parameters = grid_search.best_params_
best_accuracy = grid_search.best_score_
